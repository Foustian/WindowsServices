//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace IQMedia.Service.Domain
{
    public partial class IQMediaEntities : ObjectContext
    {
        public const string ConnectionString = "name=IQMediaEntities";
        public const string ContainerName = "IQMediaEntities";
    
        #region Constructors
    
        public IQMediaEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public IQMediaEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public IQMediaEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region Function Imports
        public ObjectResult<Nullable<int>> InsertFeedsReport(Nullable<long> reportID, string xML)
        {
    
            ObjectParameter reportIDParameter;
    
            if (reportID.HasValue)
            {
                reportIDParameter = new ObjectParameter("ReportID", reportID);
            }
            else
            {
                reportIDParameter = new ObjectParameter("ReportID", typeof(long));
            }
    
            ObjectParameter xMLParameter;
    
            if (xML != null)
            {
                xMLParameter = new ObjectParameter("XML", xML);
            }
            else
            {
                xMLParameter = new ObjectParameter("XML", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertFeedsReport", reportIDParameter, xMLParameter);
        }
        public ObjectResult<Nullable<int>> InsertDiscoveryReport(Nullable<long> reportID, string xML)
        {
    
            ObjectParameter reportIDParameter;
    
            if (reportID.HasValue)
            {
                reportIDParameter = new ObjectParameter("ReportID", reportID);
            }
            else
            {
                reportIDParameter = new ObjectParameter("ReportID", typeof(long));
            }
    
            ObjectParameter xMLParameter;
    
            if (xML != null)
            {
                xMLParameter = new ObjectParameter("XML", xML);
            }
            else
            {
                xMLParameter = new ObjectParameter("XML", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("InsertDiscoveryReport", reportIDParameter, xMLParameter);
        }
        public ObjectResult<SentimentSettings> GetSentimentSettingsByClientGuid(Nullable<System.Guid> clientGuid)
        {
    
            ObjectParameter clientGuidParameter;
    
            if (clientGuid.HasValue)
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", clientGuid);
            }
            else
            {
                clientGuidParameter = new ObjectParameter("ClientGuid", typeof(System.Guid));
            }
            return base.ExecuteFunction<SentimentSettings>("GetSentimentSettingsByClientGuid", clientGuidParameter);
        }
        public ObjectResult<SolrEngines> GetSolrEngines(string requestor)
        {
    
            ObjectParameter requestorParameter;
    
            if (requestor != null)
            {
                requestorParameter = new ObjectParameter("Requestor", requestor);
            }
            else
            {
                requestorParameter = new ObjectParameter("Requestor", typeof(string));
            }
            return base.ExecuteFunction<SolrEngines>("GetSolrEngines", requestorParameter);
        }

        #endregion
    }
}
